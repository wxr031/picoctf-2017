#!/usr/bin/env python3

import pwn, math

def bsmooth(num, primes):
	result = {}
	for p in primes:
		while num % p == 0:
			num //= p
			result[p] = result.get(p, 0) + 1
	return None if len(result) == 0 or num != 1 else result

def smooth_primes(num):
	return [n for n in range(2, num + 1) if all(n % i != 0 for i in range(2, int(math.sqrt(n)) + 1))]

primes = smooth_primes(4096)

while True:
	rem = pwn.remote('shell2017.picoctf.com', 47321)
	rem.recvline() # You have 60 seconds to ...

	rem.recvuntil('N: ')
	N = int(rem.recvline().rstrip())
	rem.recvuntil('e: ')
	e = int(rem.recvline().rstrip())

	prime_cipher = dict()

	for prime in primes:
		rem.recvuntil('Enter a number to sign (-1 to stop): ')
		rem.sendline(str(prime))
		rem.recvuntil('Signature:')
		sig = int(rem.recvline().rstrip())
		prime_cipher[prime] = sig

	rem.sendline(str(-1))
	rem.recvuntil('Challenge: ')

	challenge = int(rem.recvline().rstrip())
	rem.recvuntil('Enter the signature of the challenge: ')

	factor = bsmooth(challenge, primes)
	if factor is None:
		print('Failed')
		rem.close()
		continue

	else:
		forge = 1
		for prime, count in factor.items():
			forge = (forge * pow(prime_cipher[prime], count, N)) % N
		rem.sendline(str(forge))
		print(rem.recvline())
		exit(1)
