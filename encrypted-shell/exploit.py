#!/usr/bin/env python

import math, click
import hashlib
from Crypto import Random
from Crypto.Cipher import AES
import pwn, random

BLOCK_SIZE = 16
R = Random.new()

def pad(m):
	o = BLOCK_SIZE - len(m) % BLOCK_SIZE
	return m + o * chr(o)

def unpad(p):
	return p[0:-ord(p[-1])]

def read_encrypted(KEY, c):
	data = c.decode('hex')
	IV, data = data[:BLOCK_SIZE], data[BLOCK_SIZE:]
	aes = AES.new(KEY, AES.MODE_CBC, IV)
	m = unpad(aes.decrypt(data))
	return m

def write_encrypted(KEY, m):
	IV = R.read(BLOCK_SIZE)
	aes = AES.new(KEY, AES.MODE_CBC, IV)
	c = aes.encrypt(pad(m))
	return (IV + c).encode('hex')

def extended_gcd(a, b):
	if b == 0: return None, None
	if b == 1: return 0, 1
	x, y = extended_gcd(b, a % b)
	if x is None or y is None:
		return None, None
	return y, x - (a // b) * y

def mul_inv(g, p):	
	x, y = extended_gcd(g, p)
	return None if x is None else x % p

def baby_step_giant_step(A, g, p, n):
	m = int(math.ceil(math.sqrt(n)))
	pool = dict()
	now = 1
	for j in range(m):
		pool[now] = j
		now = (now * g) % p

	now = A
	g_neg_m = pow(mul_inv(g, p), m, p);
	for i in range(m):
		if now in pool:
			return i * m + pool[now]
		now = (now * g_neg_m) % p

	raise ValueError


p = 174807157365465092731323561678522236549173502913317875393564963123330281052524687450754910240009920154525635325209526987433833785499384204819179549544106498491589834195860008906875039418684191252537604123129659746721614402346449135195832955793815709136053198207712511838753919608894095907732099313139446299843
g = 41899070570517490692126143234857256603477072005476801644745865627893958675820606802876173648371028044404957307185876963051595214534530501331532626624926034521316281025445575243636197258111995884364277423716373007329751928366973332463469104730271236078593527144954324116802080620822212777139186990364810367977
A = 60599224471338675280892530751916349778515159413752423808328059701102187627870714718035966693602191072973114841123646111608872779841184094624255525186079109811898831481367089940015561846391171130215542875940992971840860585330764274682844976540740482087538338803018712681621346835893113300860496747212230173641

B = 41577936475113646062415839313533664222336390873095585592257233546410748309845182921273101711259044469844745154398797450729717767422505327649336923087518273833440859523881791932947163012973287757609314935398468435619627316484481259644562078527117416504710807415325721826304371028711933641605633408713301811494

a = baby_step_giant_step(A, g, p, 2**46)
K = pow(B, a, p)
KEY = hashlib.sha256(str(K)).digest()

encrypted_password = 'ffed2b87861bd6feab7b995c8bbc7c9af4a0e37e7ae8e861a3fc5fcd32aa10233f2195150f863349315a3fac7a56c54051c3714a38dc7c1014c6929c2027ecb9'
password = read_encrypted(KEY, encrypted_password)

rem = pwn.remote('shell2017.picoctf.com', 40209)
rem.recvuntil('p = ')
p = int(rem.recvline())
rem.recvuntil('g = ')
g = int(rem.recvline())
rem.recvuntil('A = ')
A = int(rem.recvline())

b = random.randrange(2**46)
B = pow(g, b, p)
rem.recvuntil('B: ')
rem.sendline(str(B))

K = pow(A, b, p)
KEY = hashlib.sha256(str(K)).digest()
encrypted_password = write_encrypted(KEY, password)
rem.sendline(encrypted_password)

command = write_encrypted(KEY, '/bin/cat flag.txt')
rem.sendline(command)
encrypted_result = rem.recv()
result = read_encrypted(KEY, encrypted_result)
print result
